resturants=xpathSApply(doc,"//resturant",xmlValue)
resturants
resturants=xpathSApply(doc,"//resturant",xmlValue)=="21231"
resturants
head(resturants)
xpathSApply(doc,"//zipcode", ",xmlValue)
xpathSApply(doc,"//zipcode", ",xmlValue)=="21231""
xpathSApply(doc,"//zipcode", ",xmlValue)=="21231"
xpathSApply(doc,"//zipcode",xmlValue)=="21231"
sum(xpathSApply(doc,"//zipcode",xmlValue)=="21231")
str(doc)
str(rootNood)
head(rootNood)
doc$rootNood
rootNood$row
DT=fread("quiz1_data.csv")
str(DT)
library("XML")
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
#doc <- XML::xmlTreeParse(sub("s", "", fileURL), useInternal = TRUE)
mbm= microbenchmark(
v3 = sapply(split(DT$pwgtp15,DT$SEX),mean),
v6 = DT[,mean(pwgtp15),by=SEX],
v7 = tapply(DT$pwgtp15,DT$SEX,mean),
v8 = mean(DT$pwgtp15,by=DT$SEX),
times=1000
)
library(microbenchmark)
mbm= microbenchmark(
v3 = sapply(split(DT$pwgtp15,DT$SEX),mean),
v6 = DT[,mean(pwgtp15),by=SEX],
v7 = tapply(DT$pwgtp15,DT$SEX,mean),
v8 = mean(DT$pwgtp15,by=DT$SEX),
times=1000
)
mbm
library("microbenchmark")
mbm= microbenchmark(
v3 = sapply(split(DT$pwgtp15,DT$SEX),mean),
v6 = DT[,mean(pwgtp15),by=SEX],
v7 = tapply(DT$pwgtp15,DT$SEX,mean),
v8 = mean(DT$pwgtp15,by=DT$SEX),
times=1000
)
mbm
DT=fread("quiz1_data.csv",sep = ",")
library("microbenchmark")
mbm= microbenchmark(
v3 = sapply(split(DT$pwgtp15,DT$SEX),mean),
v6 = DT[,mean(pwgtp15),by=SEX],
v7 = tapply(DT$pwgtp15,DT$SEX,mean),
v8 = mean(DT$pwgtp15,by=DT$SEX),
times=1000
)
mbm
load("C:/Users/mohie_eldin/Documents/.RData")
mbm
#-----------------------------------------------------------------------------------------------
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "ACS.csv")
DT <- fread("ACS.csv", sep = ",")
# microbenchmark package allows you to run multiple versions of query "n" amount of times
# the example below runs 100 times
#install.packages("microbenchmark")
library("microbenchmark")
mbm = microbenchmark(
v3 = sapply(split(DT$pwgtp15,DT$SEX),mean),
v6 = DT[,mean(pwgtp15),by=SEX],
v7 = tapply(DT$pwgtp15,DT$SEX,mean),
v8 = mean(DT$pwgtp15,by=DT$SEX),
times=100
)
mbm
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
myapp <- oauth_app("github",key="8e4f45843a744f4a0d17",secret="0bbcc04bf7722c2e677abf0ebc7fc598a5650fd9")
myapp <- oauth_app("github",key="8e4f45843a744f4a0d17",secret="0bbcc04bf7722c2e677abf0ebc7fc598a5650fd9")oauth_app
myapp <-oauth_app("github",key="8e4f45843a744f4a0d17",secret="0bbcc04bf7722c2e677abf0ebc7fc598a5650fd9")
libaray(httr)
library(httr)
myapp <-oauth_app("github",key="8e4f45843a744f4a0d17",secret="0bbcc04bf7722c2e677abf0ebc7fc598a5650fd9")
q()
x <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = (11:15))x <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = (11:15))
x <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = (11:15))
x
x[which(x$var1 > 3)]
x[which(x$var1 > 3),]
x[which(x$var1 > 3),1]
x[which(x$var1 > 3),1:2]
x[x$var1 > 3),]
x[x$var1 > 3,]
x[x$var1 > 3,1]
sort(x$var1)
sort(x[$var1,])
sort(x[x$var1,])
library(swrl)
library(swrl)
library("swirl")
swirl
swirl()
install.package(reshape2)
install.packages(reshape2)
utils:::menuInstallLocal()
library(reshape2)
head(mtcars)
mtCars$carnames <- rownames(mtCars)
mtcars$carnames <- rownames(mtcars)
carnames
mtcars$carnames
carmelt <- melt(mtcars,id=c("carnames","cyl","gear"),mesure.vars=c("hp","mpg"))
carmelt
head(carmelt)
tail(carmelt)
head(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
head(carmelt)
str(carmelt)
cylData <- dcast( carmelt, cyl ~ variable)
cylData <- dcast( carmelt, cyl ~ variable,mean)
cylData
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
cylData<- dcast(carMelt, cyl ~ variable)
cylData
cylData<- dcast(carMelt, cyl ~ hp)
cylData<- dcast(carMelt, cyl ~ variable.hp)
cylData<- dcast(carMelt, cyl ~ variable[hp])
cylData<- dcast(carMelt, cyl ~ variable$hp)
cylData<- dcast(carMelt, cyl ~ variable$"hp")
head(insectSpary)
library(InsectSprays)
InsectSprays
head(InsectSprays)
t <- tapply(InsectSprays$count,InsectSprays$spray,sum)
t
library(plyr)
ddply(InsectSprays,.(spray),summarize,sum = sum(count))
ddply(InsectSprays,.(spray),summarize,spray = sum(count))
ddply(InsectSprays,.(spray),summarize,hi= sum(count))
df1 <- data.frame(id=sample(1:10),x=norm(10))
df1 <- data.frame(id=sample(1:10),x=rnorm(10))
df2 <- data.frame(id=sample(1:10),x=rnorm(10))
df_merge <= merge(df1,df2)
df_merge <- merge(df1,df2)
df_merge
df_list <- list(df1,df2)
join_all(df1,df2)
join_all(df_list)
df1
df2
df2 <- data.frame(id=sample(1:10),y=rnorm(10))
join(df1,df2)
join(colnames(df1),colnames(df2))
merge(colnames(df1),colnames(df2))
merge(df1,df2)
df2 <- data.frame(id2=sample(1:10),y=rnorm(10))
join(df1,df2)
merge(df1,df2)
merge(df1,df2,by.x=id,by.y=id2)
merge(df1,df2,by.x="id",by.y="id2")
q()
rnorm(10)
dvd
library(swirl)
swirl()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
filter(pack_sum,count > 679)
top_counts <- filter(pack_sum,count > 6779)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts_stored <- arrange(top_counts,count)
top_counts_stored <- arrange(top_counts,desc(count))
top_counts_sorted <- arrange(top_counts,desc(count) )
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
filter(pack_sum,unique > 465 )
filter(pack_sum , unique > 465 )
filter(pack_sum, unique > 465)
skip()
View()
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
library(swirl)
swirl()
gather(students,sex, count , -grade)
play()
student
students
nxt()
students
students2
res <- gather(students2,sex_class,count)
res <- gather(students2,sex_class,count,-grade)
res
?separate
seprate(data = res , col = sex_class , into = c("sex" , "class" ) )
seprate(data = res , col = sex_class , into = c("sex" , "class" ) )
separate(data = res , col = sex_class , into = c("sex" , "class" ) )
q()
library(swil)
library(swirl)
swirl
swirl
swirl
swirl()
students3
skip()
play()
students3 %>% gather(class,grade,class1:class5)
students3 %>% gather(class,grade,class1:class5,na.rm=TRUE)
students3 %>% gather(class,grade,na.rm=TRUE)
students3 %>% gather(class,class1:class5,na.rm=TRUE)
students3 %>% gather(class,grade,class1:class5,-name,na.rm=TRUE)
students3 %>% gather(class,grade,class1:class5,-name,-test,na.rm=TRUE)
nxt()
?spread
submit()
skip()
library(reader)
library(readr)
parse_number("class")
parse_number("class5")
submit()
skip()
students4
submit()
skip()
skip()
skip()
passed
failed
passed <- mutate(passed , status = c("passed")
)
passed <-  passed %>% mutate(status = "passed")
failed <- failed %<% mutate(status = "failed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed,failed)
sat
submit()
submit()
skip()
skip()
swirl()
q()
date()
Sys.Date()
d <- Sys.Date()
format(d,"%a %b %d")
format(d,"%a %d %b ")
format(d,"%A %d %b ")
format(d,"%A %D %b ")
format(d,"%A %D %B ")
class(d)
d<-format(d,"%A %D %B ")
class(d)
x="30jul1960"
as.Date(x,"%d %b %y")
as.Date(x,"%a %d %b %y")
as.Date(x," %y  %b %d ")
x
as.Date(x,"   %b %d %y ")
as.Date(x,"%d %b  %y ")
library(dplyr)
library(tidyr)
library(mgsub)
#setting the working directory to the project directory and reading the data files
setwd("E:/Coursera data science specialization/3. getting and cleaning data/course project/UCI HAR Dataset")
activity_labels <- read.table("./activity_labels.txt")
features <- read.table("./features.txt")
subject_test <- read.table("./test/subject_test.txt")
test_set<- read.table("./test/x_test.txt")
test_labels<- read.table("./test/y_test.txt")
subject_train <- read.table("./train/subject_train.txt")
train_set<- read.table("./train/x_train.txt")
train_labels<- read.table("./train/y_train.txt")
test_set <- test_set %>% mutate(set_type = "Test")
train_set <- train_set %>% mutate(set_type = "Train")
all_data_set <-  bind_rows(train_set,test_set)
filtering the features on the mean and the std only as a prepreation to merge the data
mean_index <- grep("mean",features$V2)
std_index <- grep("std",features$V2)
filtered_featured <- features[c( mean_index,std_index ),]
#filtering the features on the mean and the std only as a prepreation to merge the data
mean_index <- grep("mean",features$V2)
std_index <- grep("std",features$V2)
filtered_featured <- features[c( mean_index,std_index ),]
all_data_set <- all_data_set[,c( mean_index,std_index )]
names(all_data_set) <- filtered_featured[,"V2"]
View(all_data_set)
ncol(all_data_set)
all_data_set <- all_data_set[,c( mean_index,std_index )]
names(all_data_set) <- filtered_featured[,"V2"]
all_data_set <- all_data_set[,c( mean_index,std_index )]
mean_index <- grep("mean",features$V2)
std_index <- grep("std",features$V2)
filtered_featured <- features[c( mean_index,std_index ),]
all_data_set <- all_data_set[,c( mean_index,std_index )]
names(all_data_set) <- filtered_featured[,"V2"]
View(all_data_set)
library(dplyr)
library(tidyr)
library(mgsub)
#setting the working directory to the project directory and reading the data files
setwd("E:/Coursera data science specialization/3. getting and cleaning data/course project/UCI HAR Dataset")
activity_labels <- read.table("./activity_labels.txt")
features <- read.table("./features.txt")
subject_test <- read.table("./test/subject_test.txt")
test_set<- read.table("./test/x_test.txt")
test_labels<- read.table("./test/y_test.txt")
subject_train <- read.table("./train/subject_train.txt")
train_set<- read.table("./train/x_train.txt")
train_labels<- read.table("./train/y_train.txt")
#add a coulmn that identify the row type test or train to bind the train and test data
test_set <- test_set %>% mutate(set_type = "Test")
train_set <- train_set %>% mutate(set_type = "Train")
all_data_set <-  bind_rows(train_set,test_set)
#filtering the features on the mean and the std only as a prepreation to merge the data
mean_index <- grep("mean",features$V2)
std_index <- grep("std",features$V2)
filtered_featured <- features[c( mean_index,std_index ),]
#subsetting only the colmuns that on the mean and standared deviation and giving the coulmns header the feature names
all_data_set <- all_data_set[,c( mean_index,std_index )]
names(all_data_set) <- filtered_featured[,"V2"]
names(all_data_set) <-  mgsub( names(all_data_set),c("^t","^f","Acc","-mean\\(\\)","-meanFreq\\(\\)","Gyro","Mag","std\\(\\)"),
c("TimeDomain","FrequencyDomain","Accelerometer","Mean","Mean","Gyroscope","Magnitude","STD")
)
View(names(all_data_set))
all_subjects <- bind_rows(subject_train ,subject_test)
all_labels <- bind_rows(train_labels,test_labels) %>% rename(activity=V1)
all_labels$activity <- mgsub(as.character(all_labels$activity),c("1","2","3","4","5","6"),
c("Walking","Walking_Upstairs","Walking_Downstairs","Sitting","Standing","Laying") )
all_data_set <- all_data_set %>%  mutate(subject = all_subjects$V1, activity=all_labels$activity)
test_set <- test_set %>% mutate(set_type = "Test")
train_set <- train_set %>% mutate(set_type = "Train")
all_data_set <-  bind_rows(train_set,test_set)
#filtering the features on the mean and the std only as a prepreation to merge the data
mean_index <- grep("mean",features$V2)
std_index <- grep("std",features$V2)
filtered_featured <- features[c( mean_index,std_index ),]
#subsetting only the colmuns that on the mean and standared deviation and giving the coulmns header the feature names
all_data_set <- all_data_set[,c( mean_index,std_index )]
names(all_data_set) <- filtered_featured[,"V2"]
#putting descriptive names to the column headers
names(all_data_set) <-  mgsub( names(all_data_set),c("^t","^f","Acc","-mean\\(\\)","-meanFreq\\(\\)","Gyro","Mag","std\\(\\)"),
c("TimeDomain","FrequencyDomain","Accelerometer","Mean","Mean","Gyroscope","Magnitude","STD")
)
#stacking test_subject and train_subject in one coulmn called subject as a preperation to add it to the merged data set
all_subjects <- bind_rows(subject_train ,subject_test)
#stacking the activity tables and substitute the activity number by the activity name
all_labels <- bind_rows(train_labels,test_labels) %>% rename(activity=V1)
all_labels$activity <- mgsub(as.character(all_labels$activity),c("1","2","3","4","5","6"),
c("Walking","Walking_Upstairs","Walking_Downstairs","Sitting","Standing","Laying") )
all_data_set <- all_data_set %>%  mutate(subject = all_subjects$V1, activity=all_labels$activity)
View(names(all_data_set))
library(dplyr)
library(tidyr)
library(mgsub)
all_data_set <- all_data_set %>%  mutate(subject = all_subjects$V1)
all_data_set$subject = all_subjects$V1
names(all_data_set)
all_data_set[,c("subject","activity")] = c(all_subjects$V1 , all_labels$activity)
all_data_set[,c("subject","activity")] = c(all_subjects$V1 , all_labels$activity)
View(all_data_set)
all_labels <- bind_rows(train_labels,test_labels) %>% rename(activity=V1)
all_labels$activity <- mgsub(as.character(all_labels$activity),c("1","2","3","4","5","6"),
c("Walking","Walking_Upstairs","Walking_Downstairs","Sitting","Standing","Laying") )
all_data_set <- mutate(all_data_set, subject = all_subjects$V1,activity = all_labels$activity)
View(names(all_data_set))
all_data_set <- all_data_set[,c(82,81,80,1:79)]
all_data_set <- all_data_set[,c( mean_index,std_index,set_type )]
#subsetting only the colmuns that on the mean and standared deviation and giving the coulmns header the feature names
all_data_set <- all_data_set[,c( mean_index,std_index,"set_type" )]
all_data_set <-  bind_rows(train_set,test_set)
mean_index <- grep("mean",features$V2)
std_index <- grep("std",features$V2)
filtered_featured <- features[c( mean_index,std_index ),]
all_data_set <- all_data_set[,c( mean_index,std_index,"set_type" )]
all_data_set <- all_data_set[,c( mean_index,std_index,set_type )]
all_data_set <- all_data_set[,c( mean_index,std_index,80 )]
names(all_data_set) <- filtered_featured[,"V2"]
View(names(all_data_set))
test_set <- test_set %>% mutate(set_type = "Test")
train_set <- train_set %>% mutate(set_type = "Train")
all_data_set <-  bind_rows(train_set,test_set)
set_type <- all_data_set$set_type
mean_index <- grep("mean",features$V2)
std_index <- grep("std",features$V2)
filtered_featured <- features[c( mean_index,std_index ),]
#subsetting only the colmuns that on the mean and standared deviation and giving the coulmns header the feature names
all_data_set <- all_data_set[,c( mean_index,std_index)]
names(all_data_set) <- filtered_featured[,"V2"]
names(all_data_set) <-  mgsub( names(all_data_set),c("^t","^f","Acc","-mean\\(\\)","-meanFreq\\(\\)","Gyro","Mag","std\\(\\)"),
c("TimeDomain","FrequencyDomain","Accelerometer","Mean","Mean","Gyroscope","Magnitude","STD")
)
all_subjects <- bind_rows(subject_train ,subject_test)
all_labels <- bind_rows(train_labels,test_labels) %>% rename(activity=V1)
all_labels$activity <- mgsub(as.character(all_labels$activity),c("1","2","3","4","5","6"),
c("Walking","Walking_Upstairs","Walking_Downstairs","Sitting","Standing","Laying") )
all_data_set <- mutate(all_data_set, Subject = all_subjects$V1,Activity = all_labels$activity , Set_type = set_type)
all_data_set <- all_data_set[,c(82,81,80,1:79)]
all_data_set <- mutate(all_data_set, Subject = all_subjects$V1,Activity = all_labels$activity , Set_type = set_type)
all_data_set[,c("Activity,Subject","Set_type")] <- c(all_subjects$V1,all_labels$activity,set_type)
all_data_set[,c("Activity,Subject")] <- c(all_subjects$V1,all_labels$activity)
all_data_set[,c("subject","activity","set_type")] = c(all_subjects$V1 , all_labels$activity,set_type)
all_data_set <- all_data_set[,c(82,81,80,1:79)]
View(all_data_set)
test_set <- test_set %>% mutate(set_type = "Test")
train_set <- train_set %>% mutate(set_type = "Train")
all_data_set <-  bind_rows(train_set,test_set)
set_type <- all_data_set$set_type #to add it to the data frame again as it will be removed during the filtering on the mean and std
#filtering the features on the mean and the std only as a prepreation to merge the data
mean_index <- grep("mean",features$V2)
std_index <- grep("std",features$V2)
filtered_featured <- features[c( mean_index,std_index ),]
#subsetting only the colmuns that on the mean and standared deviation and giving the coulmns header the feature names
all_data_set <- all_data_set[,c( mean_index,std_index)]
names(all_data_set) <- filtered_featured[,"V2"]
#putting descriptive names to the column headers
names(all_data_set) <-  mgsub( names(all_data_set),c("^t","^f","Acc","-mean\\(\\)","-meanFreq\\(\\)","Gyro","Mag","std\\(\\)"),
c("TimeDomain","FrequencyDomain","Accelerometer","Mean","Mean","Gyroscope","Magnitude","STD")
)
#stacking test_subject and train_subject in one coulmn called subject as a preperation to add it to the merged data set
all_subjects <- bind_rows(subject_train ,subject_test)
#stacking the activity tables and substitute the activity number by the activity name
all_labels <- bind_rows(train_labels,test_labels) %>% rename(activity=V1)
all_labels$activity <- mgsub(as.character(all_labels$activity),c("1","2","3","4","5","6"),
c("Walking","Walking_Upstairs","Walking_Downstairs","Sitting","Standing","Laying") )
#all_data_set <- mutate(all_data_set, Subject = all_subjects$V1,Activity = all_labels$activity , Set_type = set_type)
all_data_set[,c("subject","activity","set_type")] = c(all_subjects$V1 , all_labels$activity,set_type)
View(all_data_set)
ncol(all_data_set)
all_data_set <- all_data_set[,c(82,81,80,1:79)]
View(all_data_set)
all_data_set %>% group_by(activity,subject) %>% summarise(all_data_set[,4:10299])
all_data_set %>% group_by(activity,subject) %>% summarise(all_data_set[,c(4:10299)])
all_data_set %>% group_by(activity,subject) %>% summarise(mean(all_data_set))
all_data_set %>% group_by(activity,subject) %>% summarise(mean_variables=mean(all_data_set[,c(1,4:10299)]))
head(all_data_set[,c(1,4:10299)])
head(all_data_set[,c(4:10299)])
head(all_data_set[,4:10299])
head(all_data_set[,1:3])
head(all_data_set[,1:10299])
all_data_set %>% group_by(activity,subject) %>% summarise(mean_variables=mean( all_data_set[,c(1,4:82)] ) )
all_data_set %>% group_by(activity,subject) %>% summarise(mean_variables=mean( all_data_set[,c(4:82)] ) )
head( all_data_set %>% group_by(activity,subject) )
tail( all_data_set %>% group_by(activity,subject) )
View( all_data_set %>% group_by(activity,subject) )
table(all_subjects)
subject_activity <- all_data_set %>% group_by(activity,subject) %>% summarise(mean_variable = `TimeDomainBodyAccelerometerMean-X`)
activity_subject <- all_data_set %>% group_by(activity,subject) %>% summarise(mean_variable = `TimeDomainBodyAccelerometerMean-X`)
activity_subject <- all_data_set %>% group_by(activity) %>% summarise(mean_variable = `TimeDomainBodyAccelerometerMean-X`)
tapply(all_data_set,all_data_set$activity, mean)
tapply(all_data_set[,4:82],all_data_set$activity, mean)
split(all_data_set,all_data_set$activity)
View(split(all_data_set,all_data_set$activity))
splited <- split(all_data_set,all_data_set$activity)
sapply(splited,all_data_set$activity,mean)
View(mean(all_data_set))
View(mean(all_data_set[,4:82]))
all_data_set %>% group_by(activity,subject) %>% summarise_at(all_data_set[,4:82])
all_data_set %>% group_by(activity,subject) %>% summarise_at(vars( all_data_set[,4:82]))
all_data_set %>% group_by(activity,subject) %>% summarise_at(vars( c(4:82) ) )
all_data_set %>% group_by(activity,subject) %>% summarise_at(vars(4:82) )
all_data_set %>% group_by(activity,subject) %>% summarise_at(vars(4:82) ,mean)
all_data_set[,2:82] %>% group_by(activity,subject) %>% summarise_all(mean)
View( all_data_set[,2:82] %>% group_by(activity,subject) %>% summarise_all(mean) )
View( all_data_set %>% group_by(activity,subject) %>% summarise_all(mean) )
test_set <- test_set %>% mutate(set_type = "Test")
train_set <- train_set %>% mutate(set_type = "Train")
all_data_set <-  bind_rows(train_set,test_set)
set_type <- all_data_set$set_type #to add it to the data frame again as it will be removed during the filtering on the mean and std
#filtering the features on the mean and the std only as a prepreation to merge the data
mean_index <- grep("mean",features$V2)
std_index <- grep("std",features$V2)
filtered_featured <- features[c( mean_index,std_index ),]
#subsetting only the colmuns that on the mean and standared deviation and giving the coulmns header the feature names
all_data_set <- all_data_set[,c( mean_index,std_index)]
names(all_data_set) <- filtered_featured[,"V2"]
#putting descriptive names to the column headers
names(all_data_set) <-  mgsub( names(all_data_set),c("^t","^f","Acc","-mean\\(\\)","-meanFreq\\(\\)","Gyro","Mag","std\\(\\)"),
c("TimeDomain","FrequencyDomain","Accelerometer","Mean","Mean","Gyroscope","Magnitude","STD")
)
#stacking test_subject and train_subject in one coulmn called subject as a preperation to add it to the merged data set
all_subjects <- bind_rows(subject_train ,subject_test)
#stacking the activity tables and substitute the activity number by the activity name
all_labels <- bind_rows(train_labels,test_labels) %>% rename(activity=V1)
all_labels$activity <- mgsub(as.character(all_labels$activity),c("1","2","3","4","5","6"),
c("Walking","Walking_Upstairs","Walking_Downstairs","Sitting","Standing","Laying") )
#all_data_set <- mutate(all_data_set, Subject = all_subjects$V1,Activity = all_labels$activity , Set_type = set_type)
all_data_set[,c("subject","activity","set_type")] = c(all_subjects$V1 , all_labels$activity,set_type)
tidy_data <- all_data_set[,c(82,81,80,1:79)]
averaged_tidy_data <- all_data_set[,2:82] %>% group_by(activity,subject) %>% summarise_all(mean)
View(averaged_tidy_data)
warnings()
names(tidy_data[,-(1)])
averaged_tidy_data <- all_data_set[,-(1)] %>% group_by(activity,subject) %>% summarise_all(mean)
View(averaged_tidy_data)
View(tidy_data)
ncol(tidy_data)
averaged_tidy_data <- all_data_set %>% group_by(activity,subject) %>% summarise_all(mean)
View(tidy_data)
averaged_tidy_data <- tidy_data[,-contains("set_type")] %>% group_by(activity,subject) %>% summarise_all(mean)
View(averaged_tidy_data)
